{{#__commonImport}}
pub use super::super::common::{{#toUpper}}{{type}}{{/toUpper}};
{{/__commonImport}}
{{^__commonImport}}
use serde::{Serialize, Deserialize};
pub mod serialization;
use polywrap_wasm_rs::{
    BigInt,
    Read,
    Write,
    JSON
};
pub use serialization::{
    deserialize_{{#toLower}}{{type}}{{/toLower}},
    read_{{#toLower}}{{type}}{{/toLower}},
    serialize_{{#toLower}}{{type}}{{/toLower}},
    write_{{#toLower}}{{type}}{{/toLower}}
};
{{#propertyDeps.length}}

{{#propertyDeps}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/propertyDeps}}
{{/propertyDeps.length}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct {{#toUpper}}{{type}}{{/toUpper}} {
    {{#properties}}
    pub {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/properties}}
}

impl {{#toUpper}}{{type}}{{/toUpper}} {
    pub const URI: &'static str = "{{uri}}";

    pub fn new() -> {{#toUpper}}{{type}}{{/toUpper}} {
        {{#toUpper}}{{type}}{{/toUpper}} {
            {{#properties}}
            {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}},
            {{/properties}}
        }
    }

    pub fn to_buffer(input: &{{#toUpper}}{{type}}{{/toUpper}}) -> Vec<u8> {
        serialize_{{#toLower}}{{type}}{{/toLower}}(input)
    }

    pub fn from_buffer(input: &[u8]) -> {{#toUpper}}{{type}}{{/toUpper}} {
        deserialize_{{#toLower}}{{type}}{{/toLower}}(input)
    }

    pub fn write<W: Write>(input: &{{#toUpper}}{{type}}{{/toUpper}}, writer: &mut W) {
        write_{{#toLower}}{{type}}{{/toLower}}(input, writer);
    }

    pub fn read<R: Read>(reader: &mut R) -> {{#toUpper}}{{type}}{{/toUpper}} {
        read_{{#toLower}}{{type}}{{/toLower}}(reader).expect("Failed to read {{#toUpper}}{{type}}{{/toUpper}}")
    }
}
{{/__commonImport}}