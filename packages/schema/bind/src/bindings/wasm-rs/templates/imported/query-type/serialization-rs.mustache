{{^__commonImport}}
{{#methods.length}}
use serde::{Serialize, Deserialize};
use polywrap_wasm_rs::{
    BigInt,
    Context,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    WriteSizer,
    JSON
};
{{#propertyDeps.length}}

{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#toUpper}}{{type}}{{/toUpper}},
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value
};
{{/isEnum}}
{{/propertyDeps}}
{{/propertyDeps.length}}

{{#methods}}
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/arguments}}
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_args(input: &Input{{#toUpper}}{{name}}{{/toUpper}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    sizer_context.description = "Serializing (sizing) imported query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    write_{{#toLower}}{{name}}{{/toLower}}_args(input, &mut sizer);
    let buffer: Vec<u8> = Vec::with_capacity(sizer.get_length() as usize);
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) imported query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut encoder = WriteEncoder::new(&buffer, encoder_context);
    write_{{#toLower}}{{name}}{{/toLower}}_args(input, &mut encoder);
    buffer
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_args<W: Write>(input: &Input{{#toUpper}}{{name}}{{/toUpper}}, writer: &mut W) {
    writer.write_map_length({{arguments.length}});
    {{#arguments}}
    writer.context().push("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_str("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}});
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}, |writer: &mut W, item| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}} as i32));
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&Some(input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.unwrap() as i32));
    {{/required}}
    {{/enum}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}, writer);
    {{/required}}
    {{^required}}
    if input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.as_ref().as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    writer.context().pop();
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_result(result: &[u8]) -> {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
    let mut context = Context::new();
    context.description = "Deserializing imported query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut reader = ReadDecoder::new(result, context);
    {{#return}}
    reader.context().push("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "reading function output");
    {{#scalar}}
    let res = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(){{#required}}.unwrap(){{/required}};
    {{/scalar}}
    {{#array}}
    let res = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
        {{> deserialize_array_nobox}}
    }){{#required}}.expect("Failed to read array"){{/required}};
    {{/array}}
    {{#enum}}
    {{> deserialize_enum}}
    let res = value;
    {{/enum}}
    {{#object}}
    {{> deserialize_object_refmut}}
    let res = object;
    {{/object}}
    {{/return}}
    reader.context().pop();
    res
}
{{^last}}

{{/last}}
{{/methods}}
{{/methods.length}}
{{/__commonImport}}