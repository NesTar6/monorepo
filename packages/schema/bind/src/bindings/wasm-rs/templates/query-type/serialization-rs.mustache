use serde::{Serialize, Deserialize};
use std::convert::TryFrom;
use polywrap_wasm_rs::{
    BigInt,
    Context,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    WriteSizer,
    JSON,
    log
};
{{#propertyDeps.length}}

{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#toUpper}}{{type}}{{/toUpper}},
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value
};
{{/isEnum}}
{{/propertyDeps}}
{{/propertyDeps.length}}
{{#methods}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input: &[u8]) -> Result<Input{{#toUpper}}{{name}}{{/toUpper}}, String> {
    let mut context = Context::new();
    context.description = "Deserializing query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    {{#arguments.length}}
    let mut reader = ReadDecoder::new(input, context);
    let mut num_of_fields = reader.read_map_length().unwrap();

    {{#arguments}}
    {{^object}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{^required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{/object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/arguments}}

    log::w3_log("deserialize_{{#toLower}}{{name}}{{/toLower}}_args");
    log::w3_log(format!("num_of_fields {}", num_of_fields).as_str());
    let mut vec = unsafe { Vec::from_raw_parts(input.as_ptr() as *mut u8, input.len() as usize, input.len() as usize) };
    log::w3_log(format!("{:?}", vec).as_str());

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string().unwrap();
        log::w3_log(field.as_str());

        match field.as_str() {
            {{#arguments}}
            "{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading argument");
                {{#scalar}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(){{#required}}.unwrap(){{/required}};
                {{/scalar}}
                {{#array}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array_nobox}}
                }){{#required}}.expect("Failed to read array"){{/required}};
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                _{{#toLower}}{{name}}{{/toLower}} = value;
                {{/enum}}
                {{#object}}
                {{> deserialize_object_refmut}}
                _{{#toLower}}{{name}}{{/toLower}} = object;
                {{/object}}
                {{#required}}
                _{{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader.context().pop();
            }
            {{/arguments}}
            _ => {}
        }
    }
    {{#arguments}}
    {{#required}}
    if !_{{#toLower}}{{name}}{{/toLower}}_set {
        return Err(reader.context().print_with_context("Missing required argument: '{{name}}: {{type}}'"));
    }
    {{/required}}
    {{/arguments}}
    {{/arguments.length}}

    Ok(Input{{#toUpper}}{{name}}{{/toUpper}} {
        {{#arguments}}
        {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: _{{#toLower}}{{name}}{{/toLower}},
        {{/arguments}}
    })
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_result(result: {{#return}}&{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}) -> Vec<u8> {
    let mut sizer_context = Context::new();
    log::w3_log("1");
    sizer_context.description = "Serializing (sizing) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut sizer = WriteSizer::new(sizer_context);
    log::w3_log("2");
    write_{{#toLower}}{{name}}{{/toLower}}_result(result, &mut sizer);
    log::w3_log(format!("sizer.get_length() = {}", sizer.get_length()).as_str());
    let buffer_size = sizer.get_length() as usize;
    let mut buffer: Vec<u8> = Vec::with_capacity(buffer_size);
    buffer.resize(buffer_size, 0);
    log::w3_log("4");
    let mut encoder_context = Context::new();
    log::w3_log("5");
    encoder_context.description = "Serializing (encoding) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut encoder = WriteEncoder::new(&buffer, encoder_context);
    log::w3_log(format!("{}", (&buffer as &[u8]).len()).as_str());
    log::w3_log("6");
    write_{{#toLower}}{{name}}{{/toLower}}_result(result, &mut encoder);
    log::w3_log("7");
    let res_buffer = encoder.get_buffer();
    log::w3_log(format!("{}", res_buffer.len()).as_str());
    log::w3_log(format!("{:?}", res_buffer).as_str());
    res_buffer
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_result<W: Write>(result: {{#return}}&{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, writer: &mut W) {
    {{#return}}
    writer.context().push("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing result");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&result);
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&result, |writer: &mut W, item| {
        {{> serialize_array}}
    });
    {{/array}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(*result as i32));
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&Some(result.unwrap() as i32));
    {{/required}}
    {{/enum}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&result, writer);
    {{/required}}
    {{^required}}
    if result.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(result.as_ref().unwrap(), writer);
    } else {
        writer.write_nil();
    }
    {{/required}}
    {{/object}}
    writer.context().pop();
    {{/return}}
}
{{/methods}}