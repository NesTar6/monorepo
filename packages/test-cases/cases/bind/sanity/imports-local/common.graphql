type CustomType {
  str: String!
  optStr: String
  u: UInt!
  optU: UInt
  u8: UInt8!
  u16: UInt16!
  u32: UInt32!
  i: Int!
  i8: Int8!
  i16: Int16!
  i32: Int32!
  bigint: BigInt!
  optBigint: BigInt
  json: JSON!
  optJson: JSON
  bytes: Bytes!
  optBytes: Bytes
  boolean: Boolean!
  optBoolean: Boolean
  uArray: [UInt!]!
  uOptArray: [UInt!]
  optUOptArray: [UInt]
  optStrOptArray: [String]
  uArrayArray: [[UInt!]!]!
  uOptArrayOptArray: [[UInt32]]!
  uArrayOptArrayArray: [[[UInt32!]!]]!
  crazyArray: [[[[UInt32!]]!]]
  object: AnotherType!
  optObject: AnotherType
  objectArray: [AnotherType!]!
  optObjectArray: [AnotherType]
  en: CustomEnum!
  optEnum: CustomEnum
  enumArray: [CustomEnum!]!
  optEnumArray: [CustomEnum]
}

type AnotherType {
  prop: String
  circular: CustomType
}

enum CustomEnum {
  STRING
  BYTES
}

type UnionTypeA {
  propA: String
}

type UnionTypeB {
  propB: String
}

type UnionTypeC {
  propC: String
}

# TODO: should we support base-types in the union? (UInt32, String, Bytes, BigInt, JSON)

union TestUnion = UnionTypeA | UnionTypeB | UnionTypeC

type UnionPropertyObject {
  union: TestUnion!
  optUnion: TestUnion
  unionArray: [TestUnion!]!
  optUnionArray: [TestUnion]
}
